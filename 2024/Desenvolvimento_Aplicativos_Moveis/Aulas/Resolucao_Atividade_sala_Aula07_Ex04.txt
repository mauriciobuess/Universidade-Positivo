import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.ti4all.aula07_exercicio_sala.ui.theme.Aula07_Exercicio_SalaTheme

data class Post(val title: String, val content: String)

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            Aula07_Exercicio_SalaTheme {
                val posts = listOf(
                    Post("Post 1", "Conteúdo do post 1"),
                    Post("Post 2", "Conteúdo do post 2"),
                    Post("Post 3", "Conteúdo do post 3"),
                    Post("Post 4", "Conteúdo do post 4"),
                    Post("Post 5", "Conteúdo do post 5")
                )
                UserProfileScreen(
                    userName = "Arnold Van der Ley",
                    profilePicture = painterResource(id = R.drawable.avatar01),
                    posts = posts
                )
            }
        }
    }
}

@Composable
fun UserProfileHeader(userName: String, profilePicture: Painter) {
    Column(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth()
        , horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Caixa para a imagem do perfil
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(400.dp)
                .background(Color.Gray)
                .clip(CircleShape) // Para garantir que a imagem seja circular
        ) {
            Image(
                painter = profilePicture,
                contentDescription = null,
                modifier = Modifier
                    .fillMaxSize()
                    .clip(CircleShape) // Aplicar o recorte circular na imagem
            )
        }
        // Texto do nome do usuário
        Text(
            text = userName,
            color = Color.Black, // Garantir que o texto seja visível no fundo cinza
            fontWeight = FontWeight.Bold,
            fontSize = 24.sp
        )

    }
}

@Composable
fun PostCard(post: Post) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp),
        elevation = CardDefaults.cardElevation(4.dp),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier
                .padding(16.dp)
                .fillMaxWidth()
        ) {
            Text(text = post.title, fontWeight = FontWeight.Bold, fontSize = 18.sp)
            Spacer(modifier = Modifier.height(8.dp))
            Text(text = post.content, fontSize = 14.sp)
        }
    }
}

@Composable
fun UserProfileScreen(userName: String, profilePicture: Painter, posts: List<Post>) {
    Column {
        UserProfileHeader(userName = userName, profilePicture = profilePicture)

        LazyColumn {
            items(posts) { post ->
                PostCard(post = post)
            }
        }
    }
}
