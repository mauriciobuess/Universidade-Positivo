 package com.ti4all.lanterna

import android.content.Context
import android.hardware.camera2.CameraManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity 
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.material3.Switch
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat.getSystemService

@RequiresApi(Build.VERSION_CODES.M)
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            Lanterna()
        }
    }
}

@RequiresApi(Build.VERSION_CODES.M)
@Composable
fun Lanterna() {
    var isChecked by remember { mutableStateOf(false) }
    Column(modifier = Modifier.fillMaxSize()
                              .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Switch(checked = isChecked,
               onCheckedChange = { isChecked = it},
            modifier = Modifier.fillMaxWidth()
                               .wrapContentWidth(Alignment.CenterHorizontally)
        )
        if (isChecked) {
            LanternaOnOff(state = true)
        } else {
            LanternaOnOff(state = false)
        }
    }
}

@RequiresApi(Build.VERSION_CODES.M)
@Composable
private fun LanternaOnOff(state: Boolean)  {
    val context = LocalContext.current
    // Retorna o serviço de câmera do sistema
    val cameraManager = context.getSystemService(Context.CAMERA_SERVICE) as CameraManager

    try {
        // Retorna a id da câmera a ser utilizada - [0 - câmera traseira] [1 - câmera frontal]
        val idCamera: String = cameraManager.cameraIdList[0]
        // Ativa e desativa a câmera
        cameraManager.setTorchMode(idCamera, state)
    } catch (e: Exception) {
        Log.e("erroCamera", "Erro ao ligar/desligar a lanterna: ${e.message}", e)
        e.printStackTrace()
    }
}
